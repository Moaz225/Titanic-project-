# üì¶ –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.impute import SimpleImputer

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv("E:/data since/titanic.csv")

# üß† Feature Engineering (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞—Ä–∞–Ω–µ–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä—ë–Ω –∑–¥–µ—Å—å)
df["Title"] = df["Name"].str.extract(r",\s*([^\.]+)\.")
df["FamilySize"] = df["SibSp"] + df["Parch"] + 1

def age_category(age):
    if pd.isnull(age):
        return "Unknown"
    elif age < 13:
        return "Child"
    elif age < 60:
        return "Adult"
    else:
        return "Senior"

df["AgeGroup"] = df["Age"].apply(age_category)

# üéØ –¶–µ–ª–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫
target = "Survived"

# üßº –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
drop_cols = ["PassengerId", "Name", "Ticket", "Cabin"]
df_model = df.drop(columns=drop_cols)

# üîÑ –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
categorical_cols = df_model.select_dtypes(include="object").columns
for col in categorical_cols:
    le = LabelEncoder()
    df_model[col] = le.fit_transform(df_model[col].astype(str))

# üß© –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
imputer = SimpleImputer(strategy="mean")
df_model = pd.DataFrame(imputer.fit_transform(df_model), columns=df_model.columns)

# üì¶ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X = df_model.drop(columns=[target])
y = df_model[target]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º
print("–†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏:", X_train.shape)
print("–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏:", X_test.shape)
